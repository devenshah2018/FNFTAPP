pragma solidity ^0.8.9;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC1155/ERC1155.sol";
import "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol";
import "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol";

contract SFTix is ERC1155, Ownable, ERC1155Burnable, ERC1155Supply {

    mapping(address => bool) public isEventCreator;


    uint256[] public _Array_GA;

    uint256[] public _Array_VIP;

    constructor(uint256 _GASupply, uint256 _GAPrice, uint256 _VIPSupply, uint256 _VIPPrice) ERC1155("https://example.com/api/ticket/{id}.json") {
        isEventCreator[msg.sender] = true;

        _Array_GA.push(_GAPrice);
        _Array_GA.push(_GASupply);

        _Array_VIP.push(_VIPPrice);
        _Array_VIP.push(_VIPSupply);

    }
    function mint( address to, uint256 tokenId, uint256 amount, bytes4 data) public { 
        to = 0xE83897F5a8c428203dfB8b12AD242415D3c99d67;

        require(isEventCreator[msg.sender]);

        require(tokenId < _Array_GA.length || tokenId < _Array_VIP.length);

        require(amount > 0);

        for (uint i = 0; i < _Array_GA.length; i++) {
            mint(to, i, _Array_GA[i], data);
        }

        for (uint i = 0; i < _Array_VIP.length; i++) {
            mint(to, i + _Array_GA.length, _Array_VIP[i], data);
        }
    }
    

    function _beforeTokenTransfer(
        address operator,
        address from,
        address to,
        uint256[] memory ids,
        uint256[] memory amounts,
        bytes memory data
    ) internal override(ERC1155, ERC1155Supply) {
        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);
    }

}